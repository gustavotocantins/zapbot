const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');  // Para manipula√ß√£o de arquivos
const axios = require('axios');
const path = require('path');

let clientsInProgress = {};  // Armazena o estado de cada cliente
let clientTimers = {};  // Armazena os temporizadores para cada cliente

// Cria uma nova inst√¢ncia do cliente
const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        executablePath: '/usr/bin/chromium-browser',
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
    }, 
});

// Gera o QR code para login no WhatsApp Web
client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
    console.log('Escaneie o QR Code para autenticar no WhatsApp');
});

// Quando o cliente estiver pronto para enviar e receber mensagens
client.on('ready', () => {
    console.log('O bot est√° pronto para enviar e receber mensagens!');
});

async function getBairro(latitude, longitude) {
    try {
        const response = await axios.get(`https://nominatim.openstreetmap.org/reverse`, {
            params: {
                lat: latitude,
                lon: longitude,
                format: 'json',
                addressdetails: 1,
            },
            headers: {
        'User-Agent': 'Bot/1.0 (your.email@example.com)'  // Adicione seu user-agent personalizado aqui
    }
        });

        // Verifica se o endere√ßo cont√©m o bairro
        const address = response.data.address;
        if (address && address.suburb) {
            return address.suburb; // Retorna o nome do bairro
        } else if (address && address.neighbourhood) {
            return address.neighbourhood; // Retorna o nome do bairro (caso o bairro esteja em "neighbourhood")
        } else {
            return 'Bairro n√£o encontrado'; // Caso o bairro n√£o seja encontrado
        }
    } catch (error) {
        console.error('Erro ao obter bairro:', error);
        return 'Erro ao obter o bairro';
    }
}

// Quando uma nova mensagem for recebida
client.on('message', (message) => {
    // Verifica se a mensagem foi enviada em um chat privado
    if (!message.isGroupMsg) {
        console.log(message.body);

        if (!clientsInProgress[message.from]) {
            // Marca o cliente como em atendimento e envia a mensagem de boas-vindas
            clientsInProgress[message.from] = {tipoAgua: '',
                quantidade: 0,
                nome: '',
                telefone: '',
                endereco: '',
                pagamento: '',
                taxa:0,
                troco: '',
                estado: 'iniciar' }; // Inicia no est√°gio 1
            message.reply('Seja Bem-vindo! Me chamo Bernardo, sou da *√Ågua Bom Jesus* e vou te ajudar com o seu atendimento.')
                .then(() => client.sendMessage(message.from,'Trabalhamos com √°gua de 20 litros. Voc√™ gostaria de abrir o pedido?'));
             // Inicia o pedido
            // Inicia o temporizador de 5 minutos
            startInactivityTimer(message.from);
        } else {
            // Verifica o estado do cliente e responde de acordo
            handleClientResponse(client, message);
        }
    }
});
const aguas = [
    { nome: 'Nossa √Ågua', preco: 10 },
    { nome: '√Ågua Cristal', preco: 12 },
    { nome: 'Indai√°', preco: 15 }
];
const TermosConfirmo = [
    'sim', 'quero', 'claro', 'pode ser', 'pode abrir', 'ok', 'beleza', 
    'simmm', 'siiim', 'isso mesmo', 'com certeza', 'afirmativo', 
    'quero sim', 'isso', 't√¥ dentro', 'manda a√≠', 'vamo nessa', 
    'bora', 'pode mandar', 'confirma', 'topo', 'tranquilo', 
    'pode fazer', 'fechado', 'positivo', 'vamos l√°', 'vamos sim', 
    'vamos nessa', 'estou precisando', 'preciso sim', 'anota a√≠', 
    'favor abrir', 'fa√ßa o pedido', 'ok pode ser', 'manda sim', 
    'sim por favor', 'pode sim', 'claro que sim', 'certo', 
    'j√° quero', 'aceito', 'certo pode abrir', 'pode colocar','agua','√°gua','gal√£o','gostaria',
];
const Confirmo = new RegExp(`\\b(${TermosConfirmo.join('|')})\\b`, 'i');
const numerosPorExtenso = {
    'um': 1,
    'uma': 1,
    'dois': 2,
    'duas': 2,
    'tr√™s': 3,
    'tres': 3
};
// Fun√ß√£o para gerenciar a resposta do cliente
async function handleClientResponse(client, message) {
    const pedido = clientsInProgress[message.from];

    // Reinicia o temporizador sempre que o cliente interage
    resetInactivityTimer(message.from);
    // Quando o cliente enviar "Oi", "Ol√°" ou qualquer sauda√ß√£o

    // Se o cliente responder "Sim" ou "N√£o"
    if (pedido.estado === 'iniciar' && Confirmo.test(message.body.toLowerCase())) {
        let options = aguas.map((agua, index) => `${index + 1}. ${agua.nome} - Valor: R$ ${agua.preco}`).join('\n');
        message.reply('√ìtimo! Vamos come√ßar. Escolha o *tipo de √°gua* que deseja:')
        .then(() => client.sendMessage(message.from,options));
        pedido.estado = 'escolherMarca'; // Definir estado para escolha da marca
    }

    else if (message.body.toLowerCase() === 'n√£o' && pedido.estado === 'iniciar') {
        message.reply('Poxa, que pena que n√£o vai precisar de √°gua. Mas qualquer coisa, estamos aqui. Desde j√°, agradecemos o contato!');
        pedido.estado = ''; // Resetar o estado
    }

    // Se o cliente escolheu a marca da √°gua
    else if (pedido.estado === 'escolherMarca') {
        let escolha = message.body.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, '').trim();
    
    // Tentar converter escolha para n√∫mero (exemplo: "um", "uma", "dois")
        let escolhaNumero = numerosPorExtenso[escolha] || parseInt(escolha);

        if (escolhaNumero >= 1 && escolhaNumero <= aguas.length) {
        pedido.tipoAgua = aguas[escolhaNumero - 1].nome;
        pedido.preco = aguas[escolhaNumero - 1].preco;
        message.reply(`Voc√™ escolheu ${pedido.tipoAgua}. Quantos garraf√µes de 20 litros voc√™ gostaria de pedir?`);
        pedido.estado = 'quantidade'; // Passar para o pr√≥ximo passo
     }  else {
        const aguaEscolhida = aguas.find(agua =>
            agua.nome.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, '') === escolha
        );

        if (aguaEscolhida) {
            pedido.tipoAgua = aguaEscolhida.nome;
            pedido.preco = aguaEscolhida.preco;
            message.reply(`Voc√™ escolheu ${pedido.tipoAgua}. Quantos garraf√µes de 20 litros voc√™ gostaria de pedir?`);
            pedido.estado = 'quantidade'; // Passar para o pr√≥ximo passo
        } else {
            message.reply('Escolha inv√°lida. Por favor, escolha um n√∫mero de 1 a 3 ou digite o nome do tipo de √°gua.');
        }
    }
}

    // Se o cliente informa a quantidade
    else if (pedido.estado === 'quantidade') {
        let entrada = message.body.toLowerCase().trim();
        entrada = entrada.normalize("NFD").replace(/[\u0300-\u036f]/g, ''); // Remover acentos
    
        // Tentar converter entrada para n√∫mero
        let quantidade = numerosPorExtenso[entrada] || parseInt(entrada);
    
        if (isNaN(quantidade) || quantidade <= 0) {
            message.reply('Por favor, forne√ßa uma quantidade v√°lida de garraf√µes.');
        } else {
            pedido.quantidade = quantidade;
            message.reply(`Voc√™ pediu ${pedido.quantidade} garraf√µes de 20 litros. Agora, por favor, me passe seu nome.`);
            pedido.estado = 'nome'; // Passar para o pr√≥ximo passo
        }
    }

    // Receber o nome
    else if (pedido.estado === 'nome') {
        pedido.nome = message.body;
        message.reply(`Ol√°, *${pedido.nome}!* Por favor, me informe seu *telefone* para contato.`);
        pedido.estado = 'telefone'; // Passar para o pr√≥ximo passo
    }

    // Receber o telefone
    else if (pedido.estado === 'telefone') {
        pedido.telefone = message.body;
        message.reply('Agora, por favor, me informe o *seu endere√ßo* para *entrega.*');
        pedido.estado = 'endereco'; // Passar para o pr√≥ximo passo
    }

    // Receber o endere√ßo
    else if (pedido.estado === 'endereco') {
        pedido.endereco = message.body;
        message.reply(`Voc√™ informou o seguinte endere√ßo: ${pedido.endereco}.`)
        .then(() => client.sendMessage(message.from,'Vamos verificar a taxa de entrega. Mande a sua *localiza√ß√£o fixa:*\n*Android:* clique no clip üìé, selecione localiza√ß√£o e escolha a op√ß√£o ‚Äúlocaliza√ß√£o atual‚Äù.\n*iPhone:* clique no ‚ûï, selecione localiza√ß√£o e escolha a op√ß√£o ‚Äúlocaliza√ß√£o atual‚Äù.'));
        pedido.estado = 'taxa'; // Passar para o pr√≥ximo passo
    }
    else if(message.location && pedido.estado === 'taxa'){
        const { latitude, longitude } = message.location;
        const bairro = await getBairro(latitude, longitude);
            if (bairro === "Campina" || bairro === "Cidade Velha"){
                client.sendMessage(message.from, `A entrega para o bairro Campina √© *gratuita!*`)
                .then(() => client.sendMessage(message.from,`Qual ser√° a forma de pagamento? Responda *"Dinheiro"* ou *"Pix"*.`));
                pedido.taxa = 0;
            } else if(bairro == "Umarizal"){
                client.sendMessage(message.from, `A taxa de entrega para o bairro *${bairro}* √© de R$ 15,00`)
                .then(() => client.sendMessage(message.from,`Qual ser√° a forma de pagamento? Responda *"Dinheiro"* ou *"Pix"*.`));
                pedido.taxa = 15;
            } else if(bairro == 'Jurunas'){
                client.sendMessage(message.from, `A taxa de entrega para o bairro *${bairro}* √© de R$ 14,80`)
                .then(() => client.sendMessage(message.from,`Qual ser√° a forma de pagamento? Responda *"Dinheiro"* ou *"Pix"*.`));
                pedido.taxa = 14.8;
            }else if(bairro == 'Nazar√©'){
                client.sendMessage(message.from, `A taxa de entrega para o bairro *${bairro}* √© de R$ 16,50`)
                .then(() => client.sendMessage(message.from,`Qual ser√° a forma de pagamento? Responda *"Dinheiro"* ou *"Pix"*.`));
                pedido.taxa = 16.5;
            }else if(bairro == 'Reduto'){
                client.sendMessage(message.from, `A taxa de entrega para o bairro *${bairro}* √© de R$ 8,50`)
                .then(() => client.sendMessage(message.from,`Qual ser√° a forma de pagamento? Responda *"Dinheiro"* ou *"Pix"*.`));
                pedido.taxa = 8.5;
            } else{
                client.sendMessage(message.from, `Poxa, sentimos muito! Ainda n√£o estamos atendendo o bairro *${bairro},* mas esperamos chegar a√≠ em breve!`);
                delete clientsInProgress[message.from];
                return
            }
        pedido.estado = 'pagamento';
    }
    // Receber a forma de pagamento
    else if (pedido.estado === 'pagamento') {
        if (message.body.toLowerCase() === 'dinheiro') {
            pedido.pagamento = 'Dinheiro';
            message.reply('Voc√™ escolheu pagamento em dinheiro. Precisa de troco?');
            pedido.estado = 'troco'; // Passar para o pr√≥ximo passo
        } else if (message.body.toLowerCase() === 'pix') {
            pedido.pagamento = 'Pix';
            message.reply('Voc√™ escolheu pagamento via Pix.\n Nossa *chave pix* √© 04588776374')
            .then(() => client.sendMessage(message.from,'Agora vou passar o resumo do seu pedido. OK?'));
            pedido.troco = 0;
            pedido.estado = 'resumo'; // Passar para o pr√≥ximo passo
        } else {
            message.reply('Desculpe, n√£o entendi. Responda "Dinheiro" ou "Pix".');
        }
    }

    // Perguntar se precisa de troco
    else if (pedido.estado === 'troco') {
        if (Confirmo.test(message.body.toLowerCase())) {
            message.reply('Qual valor ser√° *pago para o entregador?*')
            .then(() => client.sendMessage(message.from,'Ex: 30,40,50.'));;
            pedido.estado = 'ValorTroco';
            return;

        } else if (message.body.toLowerCase() === 'n√£o') {
            pedido.troco = false;
            message.reply('Voc√™ n√£o vai precisar de troco! Agora, vou passar o resumo do seu pedido. OK?');
            pedido.troco = 0;
        } else {
            message.reply('Desculpe, n√£o entendi. Responda "Sim" ou "N√£o".');
            return;
        }
        pedido.estado = 'resumo'; // Passar para o pr√≥ximo passo
    }
    else if (pedido.estado === "ValorTroco"){
        pedido.troco = message.body;
        message.reply(`O valor que voc√™ vai entregar vai ser: ${message.body}.`)
        .then(() => client.sendMessage(message.from,'Agora, vou repassar o resumo do seu pedido, OK?'));
        pedido.estado = 'resumo';
    }
    // Passar o resumo do pedido
    else if (pedido.estado === 'resumo') {
        let total = pedido.quantidade * pedido.preco+pedido.taxa;
        let mensagemResumo = `*üìÑRESUMO DO PEDIDO:*\n`;
        mensagemResumo += `Tipo de √°gua: _${pedido.tipoAgua}_\n`;
        mensagemResumo += `Quantidade: _${pedido.quantidade} garraf√µes de 20L_\n`;
        mensagemResumo += `Pre√ßo unit√°rio: _R$ ${pedido.preco}_\n`;
        if (pedido.taxa === 0) {
            mensagemResumo += `Taxa de entrega: _*Gr√°tis*_\n`;
        } else{
            mensagemResumo += `Taxa de entrega: _R$ ${pedido.taxa}_\n`
        }
        mensagemResumo += `*Total: _R$ ${total}_*\n`;
        mensagemResumo += `*üöò DADOS DE ENTREGA*\n`;
        mensagemResumo += `Nome: _${pedido.nome}_\n`;
        mensagemResumo += `Telefone: _${pedido.telefone}_\n`;
        mensagemResumo += `Endere√ßo: _${pedido.endereco}_\n`;
        mensagemResumo += `Forma de pagamento: _${pedido.pagamento}_\n`;

        if (pedido.troco === 0){
            mensagemResumo += `Necessita de Troco: N√£o\n`
            
        } else{
            mensagemResumo += `Necessita de Troco: Sim, para ${pedido.troco}\n`;
        }
        message.reply(mensagemResumo)
        .then(() => client.sendMessage(message.from,'Seu pedido *foi conclu√≠do!‚úÖ* Entraremos em contato em breve para a entrega. Obrigado!'));

        // Enviar Pedido para o contato pessoal do dono
        client.sendMessage('559192431116@c.us', `Novo Pedido‚úÖ ${mensagemResumo}`);
        delete clientsInProgress[message.from]; // Resetar o pedido para iniciar um novo atendimento
    }
}


// Fun√ß√£o para iniciar o temporizador de inatividade (5 minutos)
function startInactivityTimer(clientId) {
    clientTimers[clientId] = setTimeout(() => {
        // Se n√£o houver intera√ß√£o por 5 minutos, reinicia o atendimento
        console.log(`Cliente ${clientId} inativo por 5 minutos. Reiniciando atendimento...`);
        resetClientState(clientId);
    }, 10 * 60 * 1000); // 5 minutos
}

// Fun√ß√£o para resetar o temporizador de inatividade (sempre que o cliente interagir)
function resetInactivityTimer(clientId) {
    if (clientTimers[clientId]) {
        clearTimeout(clientTimers[clientId]);  // Limpa o temporizador anterior
        startInactivityTimer(clientId);  // Inicia um novo temporizador
    }
}

// Fun√ß√£o para reiniciar o estado do cliente
function resetClientState(clientId) {
    if (clientsInProgress[clientId]) {
        delete clientsInProgress[clientId];  // Reinicia o estado do cliente
    }
}

// Iniciar o cliente
client.initialize();
